/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three"
import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations, PerspectiveCamera, Html } from '@react-three/drei'
import { useFrame, useThree } from "@react-three/fiber"
import { isIOS } from "react-device-detect"
import useStore from "@/helpers/store"
import useWindowDimensions from "@/helpers/useWindowDimensions"

export default function Model({ iframeSrc, ...props }) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('models/animation_6_comp.glb')
  const { actions } = useAnimations(animations, group)

  const scroll = useStore(state => state.scroll)

  const macbookGroup = useRef();
  const iphoneGroup = useRef();
  const hlaGroup = useRef();
  const rocketGroup = useRef();

  const rocketInitialPosition = [24.95, 0.42, -9.62]

  const screenWidth = 334;
  const screenHeight = 216;
  const screenScale = 0.2;
  const screenDistanceFactor = 10;

  const phoneScreenWidth = 90;
  const phoneScreenHeight = 190;
  const phoneModelScale = 4;
  const phoneScreenScale = 1 / 5;
  const phoneDistanceFactor = 2;

  const { width: viewportWidth } = useWindowDimensions();

  useEffect(() => void (actions["CameraAction"].play().paused = true), [])

  useFrame((state) => {
    actions["CameraAction"].time = THREE.MathUtils.lerp(actions["CameraAction"].time, actions["CameraAction"].getClip().duration * scroll.current, 0.05)

    const t = state.clock.getElapsedTime()
    macbookGroup.current.rotation.x = THREE.MathUtils.lerp(macbookGroup.current.rotation.x, Math.cos(t / 2) / 20, 0.1)
    macbookGroup.current.rotation.y = THREE.MathUtils.lerp(macbookGroup.current.rotation.y, Math.sin(t / 4) / 20, 0.1)
    macbookGroup.current.rotation.z = THREE.MathUtils.lerp(macbookGroup.current.rotation.z, Math.sin(t / 8) / 20, 0.1)

    hlaGroup.current.rotation.z += 0.0004

    /* rocketGroup.current.position.x = (Math.random() - 0.5) * 0.1 + rocketInitialPosition[0] */

    rocketGroup.current.rotation.x += Math.cos((t + 1) * 2) / 1500;
    rocketGroup.current.rotation.y += Math.sin((t + 1) * 2) / 1500;
    rocketGroup.current.rotation.z += Math.sin((t + 1) * 2) / 1500;
    /* rocketGroup.current.rotation.y += Math.sin((t + 1) * 2) / 1000; */
    /*     rocketGroup.current.rotation.y += Math.sin(t) / 200;
        rocketGroup.current.rotation.z += Math.sin(t) / 200; */
  })

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene" >
        <group ref={macbookGroup} name="macbook" >
          <group name="screenflip" position={[0, -0.2, 0.36]} rotation={[0.04, 0, 0]}>
            <group name="screen" position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
              <mesh name="Cube008" geometry={nodes.Cube008.geometry} material={materials.aluminium} />
              <mesh name="Cube008_1" geometry={nodes.Cube008_1.geometry} material={materials['matte.001']} />
              <mesh name="Cube008_2" geometry={nodes.Cube008_2.geometry} material={materials['screen.001']}>
                <Html style={{ width: screenWidth, height: screenHeight }} distanceFactor={screenDistanceFactor} className='p-0 overflow-hidden bg-white' rotation-x={-Math.PI / 2} position={isIOS ? [0, 0.2, -0.09] : [0, 0.05, -0.09]} zIndexRange={[10, 100]} transform occlude>
                  <iframe src={iframeSrc} style={{ transform: `scale(${screenScale})`, width: screenWidth / screenScale, height: screenHeight / screenScale }} className='origin-top-left'>

                  </iframe>
                </Html>
              </mesh>
            </group>
          </group>

          <mesh name="keyboard" geometry={nodes.keyboard.geometry} material={materials.keys} position={[1.79, -1.41, 3.15]} rotation={[0.42, 0, 0]} />
          <group name="base" position={[0, -1.48, 3.06]} rotation={[0.42, 0, 0]}>
            <mesh name="Cube002" geometry={nodes.Cube002.geometry} material={materials.aluminium} />
            <mesh name="Cube002_1" geometry={nodes.Cube002_1.geometry} material={materials.trackpad} />
          </group>
          <mesh name="touchbar" geometry={nodes.touchbar.geometry} material={materials.touchbar} position={[0, -0.51, 1.09]} rotation={[0.42, 0, 0]} />
        </group>

        <group ref={iphoneGroup} name="Frame" position={[0, 3, -3.36]} rotation={[1.67, 0, 0]} scale={phoneModelScale}>
          <mesh name="Plane" geometry={nodes.Plane.geometry} material={materials.Frame} />
          <mesh name="Plane_1" geometry={nodes.Plane_1.geometry} material={materials.Frame2} />
          <mesh name="Plane_2" geometry={nodes.Plane_2.geometry} material={materials.Mic} />
          <mesh name="Plane_3" geometry={nodes.Plane_3.geometry} material={materials.Port} />
          <mesh name="Plane_4" geometry={nodes.Plane_4.geometry} material={materials.Antenna} />
          <mesh name="Apple_Logo" geometry={nodes.Apple_Logo.geometry} material={materials.Logo} />
          <group name="Body">
            <mesh name="Plane002" geometry={nodes.Plane002.geometry} material={materials.Mic} />
            <mesh name="Plane002_1" geometry={nodes.Plane002_1.geometry} material={materials.Body} />
            <mesh name="Plane002_2" geometry={nodes.Plane002_2.geometry} material={materials.Bezel} />
            <mesh name="Plane002_3" geometry={nodes.Plane002_3.geometry} material={materials.Wallpaper} />
            <mesh name="Plane002_4" geometry={nodes.Plane002_4.geometry} material={materials['Camera Glass']}>
              <Html style={{ width: phoneScreenWidth, height: phoneScreenHeight }} className='p-0 overflow-hidden' distanceFactor={phoneDistanceFactor} rotation-y={-Math.PI} rotation-x={-Math.PI / 2} position={isIOS ? [0.09, -0.02526, -0.005] : [0, -0.02526, 0]} zIndexRange={[10, 100]} transform occlude >
                <iframe src={iframeSrc} style={{ transform: `scale(${phoneScreenScale})`, borderRadius: "40px", width: phoneScreenWidth / phoneScreenScale, height: phoneScreenHeight / phoneScreenScale }} className='origin-top-left'>

                </iframe>
              </Html>
            </mesh>
            <mesh name="Plane002_5" geometry={nodes.Plane002_5.geometry} material={materials.Lens} />
            <mesh name="Plane002_6" geometry={nodes.Plane002_6.geometry} material={materials['Material.002']} />
          </group>
          <mesh name="Body001" geometry={nodes.Body001.geometry} material={materials['Screen Glass']} />
          <mesh name="Button" geometry={nodes.Button.geometry} material={materials.Frame} />
          <group name="Camera002">
            <mesh name="Plane004" geometry={nodes.Plane004.geometry} material={materials.Mic} />
            <mesh name="Plane004_1" geometry={nodes.Plane004_1.geometry} material={materials.Body} />
            <mesh name="Plane004_2" geometry={nodes.Plane004_2.geometry} material={materials.Glass} />
            <mesh name="Plane004_3" geometry={nodes.Plane004_3.geometry} material={materials['Camera Frame.001']} />
          </group>
          <group name="Camera003">
            <mesh name="Plane001" geometry={nodes.Plane001.geometry} material={materials.Port} />
            <mesh name="Plane001_1" geometry={nodes.Plane001_1.geometry} material={materials.Body} />
            <mesh name="Plane001_2" geometry={nodes.Plane001_2.geometry} material={materials['Camera Glass']} />
            <mesh name="Plane001_3" geometry={nodes.Plane001_3.geometry} material={materials.Lens} />
            <mesh name="Plane001_4" geometry={nodes.Plane001_4.geometry} material={materials['Camera Frame']} />
            <mesh name="Plane001_5" geometry={nodes.Plane001_5.geometry} material={materials['Black Glass']} />
            <mesh name="Plane001_6" geometry={nodes.Plane001_6.geometry} material={materials['Gray Glass']} />
            <mesh name="Plane001_7" geometry={nodes.Plane001_7.geometry} material={materials.Flash} />
          </group>
          <mesh name="Camera004" geometry={nodes.Camera004.geometry} material={materials['Material.003']} />
          <mesh name="Circle003" geometry={nodes.Circle003.geometry} material={materials.Frame} />
        </group>

        <group ref={hlaGroup} name="Shape_IndexedFaceSet" position={[2.34, 1.9, -26.6]} rotation={[2.15, -0.47, 3.03]} scale={0.15}>
          <mesh name="Shape_IndexedFaceSet001" geometry={nodes.Shape_IndexedFaceSet001.geometry} material={materials['hla.001']} />
          <mesh name="Shape_IndexedFaceSet001_1" geometry={nodes.Shape_IndexedFaceSet001_1.geometry} material={materials['peptide.001']} />
        </group>

        <group ref={rocketGroup} name="Rocket_Ship_01" position={[24.95, 0.42, -9.62]} rotation={[-1.69, -0.89, -2.4]} scale={0.06}>
          <mesh name="Mesh" geometry={nodes.Mesh.geometry} material={materials['Material #27']} />
          <mesh name="Mesh_1" geometry={nodes.Mesh_1.geometry} material={materials['Material #28']} />
          <mesh name="Mesh_2" geometry={nodes.Mesh_2.geometry} material={materials['Material #29']} />
          <mesh name="Mesh_3" geometry={nodes.Mesh_3.geometry} material={materials['Material #42']} />
          <mesh name="Mesh_4" geometry={nodes.Mesh_4.geometry} material={materials['Material #30']} />
        </group>

        <group name="Camera" position={[11.73, 7.98, 10.98]} rotation={[1.24, 0.33, -0.76]}>
          <PerspectiveCamera makeDefault far={100} near={0.1} fov={45} rotation={[-Math.PI / 2, 0, 0]}>
            <directionalLight
              castShadow
              position={[10, 20, 15]}
              shadow-camera-right={8}
              shadow-camera-top={8}
              shadow-camera-left={-8}
              shadow-camera-bottom={-8}
              shadow-mapSize-width={1024}
              shadow-mapSize-height={1024}
              intensity={2}
              shadow-bias={-0.0001}
            />
          </PerspectiveCamera>

        </group>

      </group>
    </group>
  )
}

useGLTF.preload('models/animation_6_comp.glb')
