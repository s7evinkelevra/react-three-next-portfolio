/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from "three"
import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations, PerspectiveCamera, Html } from '@react-three/drei'
import { useFrame, useThree } from "@react-three/fiber"
import useStore from "@/helpers/store"
import useWindowDimensions from "@/helpers/useWindowDimensions"

function Models_A1(props) {
  const scroll = useStore(state => state.scroll)
  const group = useRef()
  const macbookGroup = useRef();
  const iphoneGroup = useRef();
  const { nodes, materials, animations } = useGLTF('/models/animation.glb')
  const { actions } = useAnimations(animations, group)


  const { width: viewportWidth } = useWindowDimensions();

  useEffect(() => void (actions["CameraAction"].play().paused = true), [])

  useFrame((state) => {
    actions["CameraAction"].time = THREE.MathUtils.lerp(actions["CameraAction"].time, actions["CameraAction"].getClip().duration * scroll.current, 0.05)
    const t = state.clock.getElapsedTime()
    macbookGroup.current.rotation.x = THREE.MathUtils.lerp(macbookGroup.current.rotation.x, Math.cos(t / 2) / 20, 0.1)
    macbookGroup.current.rotation.y = THREE.MathUtils.lerp(macbookGroup.current.rotation.y, Math.sin(t / 4) / 20, 0.1)
    macbookGroup.current.rotation.z = THREE.MathUtils.lerp(macbookGroup.current.rotation.z, Math.sin(t / 8) / 20, 0.1)
    /* macbookGroup.current.position.y = THREE.MathUtils.lerp(macbookGroup.current.position.y, (-2 + Math.sin(t / 2)) / .6, 0.1) */
  })

  const screenWidth = 334;
  const screenHeight = 216;
  const screenScale = 0.2;

  const phoneScreenWidth = 68;
  const phoneScreenHeight = 143;
  const phoneModelScale = 0.04;
  const phoneScreenScale = 5.7;

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group ref={macbookGroup} name="macbook" position={viewportWidth < 800 ? [0, -4, 0] : [0, 0, 0]} /* scale={viewport.width < 800 ? 0.5 : 5} */>
          <group name="screenflip" position={[0, -0.2, 0.36]} rotation={[0.04, 0, 0]}>
            <group name="screen" position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
              <mesh name="Cube008" geometry={nodes.Cube008.geometry} material={materials.aluminium} />
              <mesh name="Cube008_1" geometry={nodes.Cube008_1.geometry} material={materials['matte.001']} />
              <mesh name="Cube008_2" geometry={nodes.Cube008_2.geometry} material={materials['screen.001']}>
                <Html style={{ width: screenWidth, height: screenHeight }} className='p-0 overflow-hidden bg-white' rotation-x={-Math.PI / 2} position={[0, 0.05, -0.09]} /* zIndexRange={[-1000, -100]} */ transform occlude>
                  <iframe src="https://luedemann2.de/" style={{ transform: `scale(${screenScale})`, width: screenWidth / screenScale, height: screenHeight / screenScale }} className='origin-top-left'>

                  </iframe>
                </Html>
              </mesh>
            </group>
          </group>
          <mesh name="keyboard" geometry={nodes.keyboard.geometry} material={materials.keys} position={[1.79, -1.41, 3.15]} rotation={[0.42, 0, 0]} />
          <group name="base" position={[0, -1.48, 3.06]} rotation={[0.42, 0, 0]}>
            <mesh name="Cube002" geometry={nodes.Cube002.geometry} material={materials.aluminium} />
            <mesh name="Cube002_1" geometry={nodes.Cube002_1.geometry} material={materials.trackpad} />
          </group>
          <mesh name="touchbar" geometry={nodes.touchbar.geometry} material={materials.touchbar} position={[0, -0.51, 1.09]} rotation={[0.42, 0, 0]} />
        </group>

        <group ref={iphoneGroup} name="Iphone001_1" position={viewportWidth < 800 ? [-0.14, 2, -3.28] : [-0.14, 4.44, -3.28]} rotation={[0.07, 1.56, 0]} scale={0.04}>
          <mesh name="Object_17" geometry={nodes.Object_17.geometry} material={materials['Material.001']} />
          <mesh name="Object_18" geometry={nodes.Object_18.geometry} material={materials.Black} />
          <mesh name="Object_19" geometry={nodes.Object_19.geometry} material={materials.Back} />
          <mesh name="Object_20" geometry={nodes.Object_20.geometry} material={materials.GOLD} />
          <mesh name="Object_21" geometry={nodes.Object_21.geometry} material={materials.BARRES} />
          <mesh name="Object_22" geometry={nodes.Object_22.geometry} material={materials.Labber} />
          <mesh name="Object_23" geometry={nodes.Object_23.geometry} material={materials.GLASS} />
          <mesh name="Object_24" geometry={nodes.Object_24.geometry} material={materials.Lenscover} />
          <mesh name="Object_25" geometry={nodes.Object_25.geometry} material={materials.material} />
          <mesh name="Object_26" geometry={nodes.Object_26.geometry} material={materials.Display}>
            <Html style={{ width: phoneScreenWidth / phoneModelScale, height: phoneScreenHeight / phoneModelScale }} className='p-0 overflow-hidden' rotation-y={Math.PI / 2} position={[4.74, -33, 6]} transform occlude >
              <iframe src="https://luedemann2.de/" style={{ transform: `scale(${4.5})`, borderRadius: "60px 70px 100px 80px", width: phoneScreenWidth * phoneScreenScale, height: phoneScreenHeight * phoneScreenScale }} className='origin-top-left'>

              </iframe>
            </Html>
          </mesh>
          <mesh name="Object_27" geometry={nodes.Object_27.geometry} material={materials['Lens.2']} />
          <mesh name="Object_28" geometry={nodes.Object_28.geometry} material={materials.material_11} />
        </group>
        <group name="Camera" position={[11.73, 7.98, 10.98]} rotation={[1.24, 0.33, -0.76]}>
          <PerspectiveCamera makeDefault far={100} near={0.1} fov={45} rotation={[-Math.PI / 2, 0, 0]}>
            <directionalLight
              castShadow
              position={[10, 20, 15]}
              shadow-camera-right={8}
              shadow-camera-top={8}
              shadow-camera-left={-8}
              shadow-camera-bottom={-8}
              shadow-mapSize-width={1024}
              shadow-mapSize-height={1024}
              intensity={2}
              shadow-bias={-0.0001}
            />
          </PerspectiveCamera>

        </group>

      </group>
    </group>
  )
}

useGLTF.preload('/macbook_iphone_scene.glb')

export default Models_A1;